from typing import List, Optional, Dict, Any
from enum import IntEnum
from cozepy.model import CozeModel, NumberPaged, AsyncNumberPaged
from cozepy.auth import Auth
from cozepy.request import HTTPRequest, Requester
from cozepy.util import remove_url_trailing_slash

{{ range .Classes }}{{ if .Description }}"""{{ .Description }}"""{{ end }}
class {{ .Name }}({{ .BaseClass }}):{{ if .IsPass }}
    pass{{ else }}
    {{ range .Fields }}{{ if .Description }}"""{{ .Description }}"""
    {{ end }}{{ .Name }}: {{ .Type }}
    {{ end }}{{ if .IsEnum }}{{ range .EnumValues }}    {{ .Name }} = {{ .Value }}  # {{ .Description }}
    {{ end }}{{ end }}{{ end }}
{{ end }}

"""
API Client for {{ .ModuleName }} endpoints
"""
class Client(object):
    def __init__(self, base_url: str, auth: Auth, requester: Requester):
        self._base_url = remove_url_trailing_slash(base_url)
        self._auth = auth
        self._requester = requester

    {{ range .Operations }}"""
    {{ .Description }}{{ range .Params }}
    :param {{ .Name }}: {{ .Description }}{{ end }}
    :return: {{ .ResponseDescription }}
    """
    def {{ .Name }}(
        self,
        *,
        {{ range .Params }}{{ .Name }}: {{ .Type }},
        {{ end }}
    ) -> {{ .ResponseType }}:
        url = f"{self._base_url}{{ .Path }}"
        {{ if .HasHeaders }}headers = {
            {{ range $key, $value := .StaticHeaders }}"{{ $key }}": "{{ $value }}",{{ end }}{{ range .HeaderParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
        }
        {{ end }}{{ if eq .Method "GET" }}params = {
            {{ range .QueryParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
        }
        return self._requester.request(
            "{{ .Method }}",
            url,
            False,
            cast={{ .ResponseType }},
            params=params,
            {{ if .HasHeaders }}headers=headers,{{ end }}
        ){{ else }}return self._requester.request(
            "{{ .Method }}",
            url,
            False,
            cast={{ .ResponseType }},
            {{ if .HasHeaders }}headers=headers,{{ end }}
            {{ if .HasQueryParams }}params={
                {{ range .QueryParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
            },{{ end }}
            {{ if .HasBody }}body={
                {{ range .BodyParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
            },{{ end }}
        ){{ end }}
    {{ end }}

"""
Async API Client for {{ .ModuleName }} endpoints
"""
class AsyncClient(object):
    def __init__(self, base_url: str, auth: Auth, requester: Requester):
        self._base_url = remove_url_trailing_slash(base_url)
        self._auth = auth
        self._requester = requester

    {{ range .Operations }}"""
    {{ .Description }}{{ range .Params }}
    :param {{ .Name }}: {{ .Description }}{{ end }}
    :return: {{ .ResponseDescription }}
    """
    async def {{ .Name }}(
        self,
        *,
        {{ range .Params }}{{ .Name }}: {{ .Type }},
        {{ end }}
    ) -> {{ .ResponseType }}:
        url = f"{self._base_url}{{ .Path }}"
        {{ if .HasHeaders }}headers = {
            {{ range $key, $value := .StaticHeaders }}"{{ $key }}": "{{ $value }}",{{ end }}{{ range .HeaderParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
        }
        {{ end }}{{ if eq .Method "GET" }}params = {
            {{ range .QueryParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
        }
        return await self._requester.arequest(
            "{{ .Method }}",
            url,
            False,
            cast={{ .ResponseType }},
            params=params,
            {{ if .HasHeaders }}headers=headers,{{ end }}
        ){{ else }}return await self._requester.arequest(
            "{{ .Method }}",
            url,
            False,
            cast={{ .ResponseType }},
            {{ if .HasHeaders }}headers=headers,{{ end }}
            {{ if .HasQueryParams }}params={
                {{ range .QueryParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
            },{{ end }}
            {{ if .HasBody }}body={
                {{ range .BodyParams }}"{{ .JsonName }}": {{ .Name }},{{ end }}
            },{{ end }}
        ){{ end }}
    {{ end }}
